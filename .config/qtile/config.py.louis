import os
import subprocess

from typing import List

from libqtile import bar, layout, widget, hook
from libqtile.config import Click, Drag, Group, Key, Match, Screen, EzKey, \
        KeyChord
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal

colors = {
    'bg': '282a36',
    'fg': 'f8f8f2',
    'bg_hl': '44475a',
}

num_screens = int(os.environ.get("CONF_NUM_SCREENS", "1"))
is_laptop = os.environ.get("CONF_LAPTOP", "0") == "1"
kinesis_keyboard = os.environ.get("CONF_KB_KINESIS", "0") == "1"

mod = "mod4" if kinesis_keyboard else "mod1"
terminal = guess_terminal(["alacritty", "gnome-terminal"])
browser = "qutebrowser"

def custom_next_layout(qtile):
    """ switch to next layout, but hide the bar(s) when the layout is Max. """
    from_max = qtile.current_layout.name == "max"
    qtile.cmd_next_layout()
    if qtile.current_layout.name == "max" or from_max:
        qtile.cmd_hide_show_bar()

keys = [
    # move focus between windows
    Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "space", lazy.group.next_window(),
        desc="Move focus to next window in group"),
    Key([mod], "b", lazy.layout.toggle_split()),

    # move windows inside workspace
    Key([mod, "shift"], "Left", lazy.layout.swap_column_left(),
        desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.swap_column_right(),
        desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(),
        desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),

    # window resizing
    KeyChord([mod], "egrave", [
        Key([], "Left", lazy.layout.grow_left(),
            desc="Grow window to the left"),
        Key([], "Right", lazy.layout.grow_right(),
            desc="Grow window to the right"),
        Key([], "Down", lazy.layout.grow_down(),
            desc="Grow window down"),
        Key([], "Up", lazy.layout.grow_up(), desc="Grow window up"),
        Key([], "n", lazy.layout.normalize(),
            desc="Reset all window sizes"),
    ], mode="RESIZING"),

    # close window
    Key([mod, "shift"], "apostrophe", lazy.window.kill(), desc="Kill focused window"),

    # Toggle fullscreen
    Key([mod], "eacute", lazy.window.toggle_fullscreen(),
        desc="Toggle fullscreen mode"),

    # Rotate through layouts
    Key([mod], "Tab", lazy.next_layout(), desc="Rotate through layouts"),

    #spawn commands
    Key([mod], "r", lazy.spawn(["dmenu_run", "-b", "-i", "-l", "8"]),
        desc="Spawn a command using a prompt widget"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch terminal"),

    # qtile managment
    Key([mod, "control"], "r", lazy.restart(), desc="Restart Qtile"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
]

# screen focus
if num_screens > 1:
    keys.extend([
        Key([mod], "t", lazy.to_screen(0)),
        Key([mod], "s", lazy.to_screen(1)),
    ])

mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(),
         start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(),
         start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front())
]

groups = []

def add_group(key, group, autospawn=None):
    groups.append(group)
    name = group.name
    if autospawn:
        def f(qtile):
            g = qtile.groups_map[name]
            if len(g.windows) == 0:
                qtile.cmd_spawn(autospawn)
            g.cmd_toscreen(toggle=False)
        action = lazy.function(f)
    else:
        action = lazy.group[name].toscreen(toggle=False)
    keys.extend([
        # switch between groups
        Key([mod], key, action,
            desc="Switch to group {}".format(name)),

        # move window to group
        Key([mod, "shift"], key, lazy.window.togroup(name, switch_group=False),
            desc="Switch to & move focused window to group {}".format(name)),
    ])

# named groups
add_group("comma", Group("media"))
add_group("a", Group("alt"))
add_group("i", Group("sys"), autospawn=terminal)
add_group("e", Group("dev"), autospawn=terminal)
add_group("u", Group("www"), autospawn=browser)

# expendable groups
add_group("agrave", Group("1"))
add_group("y", Group("2"))
add_group("x", Group("3"))
add_group("period", Group("4"))
add_group("k", Group("5"))

layouts = [
    layout.Columns(
        border_focus='#8fbcbb', #'#b48ead',
        border_normal='#3b4252',
        border_focus_stack=['#d75f5f', '#8f3d3d'],
        border_width=3,
        insert_position=1,
        margin=6,
        margin_on_single=0,
    ),

    layout.Max(),
]

widget_defaults = dict(
    font='hack',
    fontsize=13,
    padding=3,
)
extension_defaults = widget_defaults.copy()

def bar_head():
    return [
        widget.Sep(
            linewidth=0,
            padding=6,
        ),
        widget.GroupBox(
            center_aligned=True,
            disable_drag=True,
            hide_unused=True,
            highlight_method='block',
            margin=0,
            other_current_screen_border=None,
            other_screen_border=None,
            rounded=False,
            spacing=0,
            active=colors['fg'],
            background=colors['bg'],
            this_current_screen_border=colors['bg_hl'],
            this_screen_border=colors['bg_hl'],
        ),
    ]

def bar_center_main():
    res = [
        widget.Prompt(),
        widget.Spacer(length=bar.STRETCH),
        widget.Chord(),
        widget.Spacer(length=bar.STRETCH),
        widget.Systray(icon_size=16),
        widget.Sep(linewidth=0, padding=8),
    ]
    if is_laptop:
        res.extend([
            widget.Battery()
        ])
    return res

def bar_center_extra():
    return [widget.Spacer(length=bar.STRETCH)]

def bar_tail():
    return [
        widget.Clock(format='%A, %B %d â€“ %H:%M'),
        widget.Sep(linewidth=0, padding=6),
    ]

def custom_bar(main=False):
    bar_center = bar_center_main() if main else bar_center_extra()
    widgets = bar_head() + bar_center + bar_tail()
    return bar.Bar(widgets, 28, background=colors['bg'])

screens = [Screen(top=custom_bar(main=True))]
if num_screens > 1:
    screens.append(Screen(top=custom_bar(main=False)))

dgroups_key_binder = None
dgroups_app_rules = []  # type: List
follow_mouse_focus = True
bring_front_click = False
cursor_warp = True
floating_layout = layout.Floating(float_rules=[
    *layout.Floating.default_float_rules,
])
auto_fullscreen = False
focus_on_window_activation = "smart"
reconfigure_screens = True
auto_minimize = True
wmname = "LG3D"
