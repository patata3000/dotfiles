import os
from qutebrowser.api import interceptor

from qutebrowser.utils.message import error

os.environ["PATH"] = "~/.local/bin:" + os.environ["PATH"]

# pylint: disable=C0111
c = c  # noqa: F821 pylint: disable=E0602,C0103
config = config  # noqa: F821 pylint: disable=E0602,C0103

# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via
# autoconfig.yml
config.load_autoconfig(True)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to
#         break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a
#         cookie is already set for the domain. On QtWebEngine, this is the same
#         as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set("content.cookies.accept", "all", "chrome-devtools://*")


config.set("downloads.location.directory", "~/Downloads")
# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only.
#     This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a
#         cookie is already set for the domain. On QtWebEngine, this is the same
#         as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set("content.cookies.accept", "all", "devtools://*")

# Allow websites to request geolocations.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.geolocation", True, "https://www.google.com")

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}",
    "https://web.whatsapp.com/",
)

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version} Edg/{upstream_browser_version}",
    "https://accounts.google.com/*",
)

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36",
    "https://*.slack.com/*",
)

# List of URLs to host blocklists for the host blocker.  Only used when
# the simple host-blocker is used (see `content.blocking.method`).  The
# file can be in one of the following formats:  - An `/etc/hosts`-like
# file - One host per line - A zip-file of any of the above, with either
# only one file, or a file   named `hosts` (with any extension).  It's
# also possible to add a local file or directory via a `file://` URL. In
# case of a directory, all files in the directory are read as adblock
# lists.  The file `~/.config/qutebrowser/blocked-hosts` is always read
# if it exists.
# Type: List of Url
c.content.blocking.hosts.lists = []

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "chrome-devtools://*")

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome-devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome://*/*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "qute://*/*")

# Allow websites to record audio.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.media.audio_capture", True, "https://framatalk.org")

# Allow websites to record video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.media.video_capture", True, "https://framatalk.org")

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.notifications.enabled", False, "https://www.netflix.com")

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.notifications.enabled", False, "https://www.reddit.com")

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set(
    "content.register_protocol_handler",
    True,
    "https://mail.google.com?extsrc=mailto&url=%25s",
)

# Define editor command
# config.set('editor.command', ['alacritty', '-e', 'nvim', '{}'])
config.set("editor.command", ["term_exec", "nvim", "-f", "{}"])

# Format to use for the tab title. The following placeholders are
# defined:  * `{perc}`: Percentage as a string like `[10%]`. *
# `{perc_raw}`: Raw percentage, e.g. `10`. * `{current_title}`: Title of
# the current web page. * `{title_sep}`: The string `" - "` if a title
# is set, empty otherwise. * `{index}`: Index of this tab. *
# `{aligned_index}`: Index of this tab padded with spaces to have the
# same   width. * `{id}`: Internal tab ID of this tab. * `{scroll_pos}`:
# Page scroll position. * `{host}`: Host of the current web page. *
# `{backend}`: Either `webkit` or `webengine` * `{private}`: Indicates
# when private mode is enabled. * `{current_url}`: URL of the current
# web page. * `{protocol}`: Protocol (http/https/...) of the current web
# page. * `{audio}`: Indicator for audio/mute status.
# Type: FormatString
c.tabs.title.format = " {index} -- {current_title}    {audio}"

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = "https://google.com"

# Search engines which can be used via the address bar.  Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` braces.  The following further
# placeholds are defined to configure how special characters in the
# search terms are replaced by safe characters (called 'quoting'):  *
# `{}` and `{semiquoted}` quote everything except slashes; this is the
# most   sensible choice for almost all search engines (for the search
# term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
# * `{quoted}` quotes all characters (for `slash/and&amp` this
# placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
# nothing (for `slash/and&amp` this placeholder   expands to
# `slash/and&amp`). * `{0}` means the same as `{}`, but can be used
# multiple times.  The search engine named `DEFAULT` is used when
# `url.auto_search` is turned on and something else than a URL was
# entered to be opened. Other search engines can be used by prepending
# the search engine name to the search term, e.g. `:open google
# qutebrowser`.
# Type: Dict
c.url.searchengines = {"DEFAULT": "https://google.com/search?q={}"}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = "https://google.com/"

# Fonts
c.fonts.completion.category = "8pt SauceCodePro Nerd Font"
c.fonts.completion.entry = "8pt SauceCodePro Nerd Font"
c.fonts.contextmenu = "8pt SauceCodePro Nerd Font"
c.fonts.debug_console = "8pt SauceCodePro Nerd Font"
c.fonts.downloads = "8pt SauceCodePro Nerd Font"
c.fonts.hints = "8pt SauceCodePro Nerd Font bold"
c.fonts.keyhint = "8pt SauceCodePro Nerd Font bold"
c.fonts.messages.info = "8pt SauceCodePro Nerd Font"
c.fonts.prompts = "8pt SauceCodePro Nerd Font"
c.fonts.statusbar = "8pt SauceCodePro Nerd Font"
c.fonts.tabs.selected = "9pt SauceCodePro Nerd Font"
c.fonts.tabs.unselected = "9pt SauceCodePro Nerd Font"

config.set("hints.chars", "ashtgyneoi")


# Bindings for normal mode
config.bind(
    ",p", 'spawn --userscript qute-pass -u "Username: (.*)" -U "secret"'
)
config.bind(
    ",Pu",
    'spawn --userscript qute-pass -u "Username: (.*)" -U "secret" --username-only',
)
config.bind(
    ",Pp",
    'spawn --userscript qute-pass -u "Username: (.*)" -U "secret" --password-only',
)
config.bind(
    ",Po",
    'spawn --userscript qute-pass -u "Username: (.*)" -U "secret" --otp-only',
)

config.bind(
    ",Hd",
    f"hint links spawn --userscript term_exec"
    " \"youtube-dl -o '~/Downloads/youtube/%(title)s.%(ext)s' '{hint-url}' && cat || cat\"",
)
config.bind(
    ",Hp",
    f"hint links spawn --userscript term_exec"
    " \"youtube-dl -o '~/Downloads/youtube/%(playlist)s/%(title)s.%(ext)s' '{hint-url}' && cat || cat\"",
)
config.bind(
    ",Hu",
    f"hint links spawn --userscript term_exec"
    " \"youtube-dl -o '~/Downloads/youtube/%(uploader)s/%(title)s.%(ext)s' '{hint-url}' && cat || cat\"",
)

config.bind(
    ",Mpr",
    f"hint links spawn --userscript umpv"
    " --ytdl-raw-options=yes-playlist=,playlist-reverse= --save-position-on-quit {hint-url}",
)
config.bind(
    ",Mpn",
    f"hint links spawn --userscript umpv"
    " --ytdl-raw-options=yes-playlist= --save-position-on-quit {hint-url}",
)
config.bind(
    ",n",
    f"hint links spawn --userscript umpv "
    "--ytdl-raw-options=cookies=~/.config/youtube-dl/cookies/youtube,mark-watched= --save-position-on-quit {hint-url}",
)
config.bind(",m", f"spawn --userscript umpv" " {url}")
config.bind(",v", "spawn mpv {url}")
config.bind(",V", "hint links spawn mpv {hint-url}")

config.bind(",c", "download-clear")
config.bind(",e", "scroll up")
config.bind(
    ",hd",
    "spawn --userscript term_exec"
    " \"youtube-dl -o '~/Downloads/youtube/%(title)s.%(ext)s' '{url}' && cat || cat\"",
)
config.bind(
    ",hp",
    "spawn --userscript term_exec"
    " \"youtube-dl -o '~/Downloads/youtube/%(playlist)s/%(title)s.%(ext)s' '{url}' && cat || cat\"",
)
config.bind(
    ",yd",
    "spawn --userscript term_exec"
    " \"youtube-dl -o '~/Downloads/youtube/%(title)s.%(ext)s' '{url}' && cat || cat\"",
)
config.bind(
    ",yp",
    "spawn --userscript term_exec"
    " \"youtube-dl -o '~/Downloads/youtube/%(playlist)s/%(title)s.%(ext)s' '{url}' && cat || cat\"",
)
config.bind("E", "back")
config.bind("J", "search-prev")
config.bind("L", "set-cmd-text -s :open -t")
config.bind("N", "forward")
config.bind("O", "tab-next")
config.bind("Y", "tab-prev")
config.bind("h", "yank")
config.bind("j", "search-next")
config.unbind("k")
config.bind("l", "set-cmd-text -s :open")
SCROLL_DIST = 130
config.bind("e", f"scroll-px 0 -{SCROLL_DIST}")
config.bind("n", f"scroll-px 0 {SCROLL_DIST}")
config.bind("o", f"scroll-px {SCROLL_DIST} 0")
config.bind("y", f"scroll-px -{SCROLL_DIST} 0")
# config.bind('e', 'scroll up')
# config.bind('n', 'scroll down')
# config.bind('o', 'scroll right')
# config.bind('y', 'scroll left')

config.bind(",t", "spawn --userscript password_fill")

config.bind("gL", "edit-url")
# TODO check this section
# https://qutebrowser.org/doc/help/settings.html#bindings.default

# config.bind('<Ctrl-shift-n>', 'completion-item-focus --history next', "command")
# config.bind('<Ctrl-shift-e>', 'completion-item-focus --history prev', "command")

config.bind("<Ctrl-n>", "completion-item-focus next", "command")
config.bind("<Ctrl-e>", "completion-item-focus prev", "command")


# Interceptors


# def test(info: interceptor.Request):
#     url = info.request_url

#     error(str(url.fileName()))
#     subprocess.call(["notify-send", f"{url}"])


# interceptor.register(test)
