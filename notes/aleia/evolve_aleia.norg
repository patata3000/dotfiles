* Build frameworks for developers to create microservices
** Logs
* Migration
* Consistent deployment (asgard, spinnaker...)
* Protect databases with cache (EVCache, request cache...), propagate cache to deeper services
* Metrics (scale telemetrics), automatic error detection algorithm
* Reliability
* 4 9s of availability
* Care about cascading failures
* Circuit breaker
* Check for critical/non-critical failures => fallbacks (Hystrix)
* Chaos Monkey (at some point, in production)
* FIT (Fault Injection Test framework)
* Force full failures on region
* Netflix github
** Security
** Delivery tool
** Data persistence
** Insight, reliability, performance
* Microservices require organizational changes

* Changes for Aleia
** Architecture upstream
*** Very small microservices
*** Very few dependencies
*** Small team of architecturers (2-3 people)
** Backlog better created (need to talk to Olivier on how to create good tasks/US)
** Small teams
*** 4-5 devs max
*** Vertical and not by component
*** Pair programming
** TTD
*** Red, Green, Refacto
*** Test functional requirement (API)
*** 1 method = 1 assert
****   Else context may falsify results
****   Clarity
*** Wiki on how to test correctly in the project
** Trunk-Based Development
*** Very short-lived feature branches
*** Merge Code and Infra
*** Branch by abstraction
** Templated spikes (RFC)
** A lot of time dedicated for improving code base
*** Rework policies
*** Split compute api
** Enablers
*** Generic logging system for services and APIs
*** Wiki on how to log correctly
** Metrics
*** Wiki on how to use Grafana
** Template service creation
** Blue/Green deployment
** REST or GraphQL or else?
** Pacts between services
** CI/CD improvements
** Develop DevOps culture?
